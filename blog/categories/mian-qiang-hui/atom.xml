<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 勉強会 | 776]]></title>
  <link href="http://yoursite.com/blog/categories/mian-qiang-hui/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2014-06-13T03:35:50+09:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[naokun776]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JJUG_DDDに参加してみたメモ]]></title>
    <link href="http://yoursite.com/blog/2014/06/13/jjug-ddd/"/>
    <updated>2014-06-13T03:23:29+09:00</updated>
    <id>http://yoursite.com/blog/2014/06/13/jjug-ddd</id>
    <content type="html"><![CDATA[<h1><a href="http://www.java-users.jp/?p=1209">JJUG ナイトセミナー 「6.11 ドメイン駆動設計特集！ 」</a>に参加しました。そのメモと感想。</h1>

<!-- more -->


<h1>コードに語らせるために by 和智 右桂氏</h1>

<p>業務を理解してモデリング・実装するのは挑戦的でエキサイティングだ。</p>

<h2>DDDとは</h2>

<ul>
<li>Domain Driven Design</li>
<li>本を理解するのに参考文献が役に立つ</li>
</ul>


<h3>DDDのエッセンスとは</h3>

<ul>
<li>ソフトウェア開発=学習と再構築</li>
<li><p>フローの中でいつシステムの理解ができたか?</p>

<ul>
<li><p>学習とは</p>

<ul>
<li>顧客の業務を理解すること</li>
<li>顧客の言葉で理解すること->ユビキタス言語</li>
</ul>
</li>
<li><p>再構築とは</p>

<ul>
<li>モデルを共有すること</li>
<li>業務の理解を共有する</li>
<li>モデルを元にソフトウェアを作る->業務の変更にソフトウェアが追随するため</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>大事な概念</h3>

<ul>
<li><p>ユビキタス言語(第1章)</p>

<ul>
<li>チーム内のすべてのコミュニケーションとコードにおいてその言語を用いる</li>
<li>図、ドキュメント、会話の中で同一の言語を用いること</li>
</ul>
</li>
<li><p>モデル駆動設計(第1章)</p>

<ul>
<li>ソフトウェアを設計する際にモデルを基に設計する</li>
<li>モデリングパラダイム</li>
</ul>
</li>
<li><p>レイヤ型アーキテクチャ</p></li>
<li>イテレーティブなプロセス(第4章あたり)</li>
<li>戦略的設計</li>
</ul>


<h2>開発の中のDDD</h2>

<h3>システム分析</h3>

<ul>
<li>機能の階層に分解する</li>
<li>DDDだから特別なことはない</li>
</ul>


<h3>構成図と個別の設計</h3>

<ul>
<li>機能間の関連と分析及び機能毎の設計</li>
</ul>


<h3>アーキテクトの場合</h3>

<ul>
<li>領域の特性を見極めて協会設計とIF設計</li>
<li>データモデリング</li>
</ul>


<h3>プログラマーの場合</h3>

<ul>
<li>領域内での適切な設計</li>
</ul>


<h3>保守フェーズの中でのDDD</h3>

<ul>
<li>DDDとはソフトウェアを改善するため手法</li>
<li>新規のプロジェクトでのみ適応する手法ではない</li>
</ul>


<h2>手続きからモデル駆動へ</h2>

<h3>複雑な業務</h3>

<ul>
<li><p>あらゆる機能で必要というわけではない</p>

<ul>
<li>単純な業務=データスキーマの操作だけで表現できるなら手続き型で十分</li>
</ul>
</li>
<li><p>技術面での難易度とは別</p></li>
</ul>


<h3>エンティティの先</h3>

<ul>
<li>モデルによって捉える知識は名詞を見つけることにとどまらない。ビジネスの活動やルールもドメインにとって中心的。</li>
<li>ユーザが理解できないモデルを作ってはいけない。それはモデルではない。</li>
</ul>


<h1>DDDで実践する時に役に立つ話し by 加藤 潤一氏</h1>

<h2>　DDDの進め方</h2>

<ul>
<li>メンバー8名、8ヶ月間</li>
</ul>


<h3>プロジェクトが始まる前に</h3>

<ul>
<li>プロトタイプを作成</li>
<li>主要なモデルのみ実装</li>
</ul>


<h3>ユビキタス言語と実装をプロトタイプで共有・説明</h3>

<ul>
<li>前提であるアーキテクチャの共有</li>
<li>大枠のユビキタス言語が共有できたらプロトタイプを捨てて新しく作り直した</li>
</ul>


<h3>スプリント内で使えるドメインモデルを実装した</h3>

<ul>
<li>モデルをストーリーから探す</li>
</ul>


<h3>レイヤー化アーキテクチャに組み込む</h3>

<ul>
<li>放って置くと他のレイヤからDomainレイヤが侵食される</li>
</ul>


<h2>チームメンバーにDDDに関するアンケートをとってみた</h2>

<ul>
<li><p>DDDやってみて効果あった？</p>

<ul>
<li>効果が無いと答えた人はいなかった</li>
<li>エンジニア・非エンジニアの間で、コミュニケーションしやすくなった</li>
<li>新しいメンバーが参画してもコンテキストやモデル知識を共有しやすい</li>
<li>レイヤー化アーキテクチャを採用したことでソフトウェアの構造が明確になった</li>
</ul>
</li>
<li><p>苦労した点は？</p>

<ul>
<li>全員がDDDを知っている必要がある</li>
<li>リポジトリーパターンとシャーディングなどの技術的な問題と相性が悪かった</li>
<li>DDD本が抽象的すぎて設計と実装が人によりけり</li>
<li>ドメイン/非ドメインコードの区別ができるようになるのに苦労した</li>
<li>エンティティのIDとDBMSのシーケンスとの相性の悪さ</li>
</ul>
</li>
<li><p>読書会を実施した効果はあった？</p>

<ul>
<li>どちらとも言えないという人が一人いた</li>
<li>ユビキタス言語の重要性を理解できた</li>
<li>知識に対する共通基盤が作れたという効果があった</li>
</ul>
</li>
<li><p>次もDDDを採用したいか？</p>

<ul>
<li>どちらとも言えない=4、はい=1</li>
<li>規模や期間によってどの程度使っていくか分からないが、エッセンスは使っていくと思う</li>
<li>プロジェクトによりけり</li>
</ul>
</li>
<li><p>DDDの難しさ</p>

<ul>
<li>チームの全員がある程度DDDを理解する必要がある</li>
<li>同じ言葉でも捉え方は様々であり、問題が発生するまでわからない</li>
<li>シャーディングなどの技術的な問題にぶつかった時にDDDと技術の妥協点を探す</li>
</ul>
</li>
</ul>


<h1>まとめ・感想</h1>

<ul>
<li>DDD本は途中まで読んで参加したが同じく途中で挫折する人多し。</li>
<li>ソフトウェア開発の設計における心構えや方針なので知っておいて損はないかんじ。ただしチームで統一して適用するのはハードルが高い。</li>
<li>オブジェクト指向、UMLモデリングなどの設計技法に対する十分な知識と経験がないとDDDは厳しい。</li>
<li>ユビキタス言語やコアドメインの蒸溜などはモデリングというよりは円滑にプロジェクトを進めるためのテクニックに近い。</li>
<li>具体的に適用するのであれば<a href="http://www.slideshare.net/masuda220/ss-34813564">こちら</a>が現実的か。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAWS DAYS 2014に参加してみたメモ]]></title>
    <link href="http://yoursite.com/blog/2014/03/17/jaws-days-2014/"/>
    <updated>2014-03-17T23:32:41+09:00</updated>
    <id>http://yoursite.com/blog/2014/03/17/jaws-days-2014</id>
    <content type="html"><![CDATA[<p>2014/03/15(土)に<a href="http://jawsdays2014.jaws-ug.jp/">JAWS DAYS 2014</a>に参加してきました。その雑感。</p>

<!-- more -->


<h3>聴講したセッション</h3>

<ul>
<li>伊藤直也さん 「Immutable Infrastructure」</li>
<li>高山博史さん&amp;櫻井貴江子さん 「意外としらないリザーブドインスタンス。すぐに聴くコスト削減」</li>
<li>板橋正之さん 「RDS」</li>
<li>本木友浩さん 「ELB/AutoScaling」</li>
<li>玉川憲さん&amp;片山暁雄さん 「AWSクラウドデザインパターン for Enterprise」</li>
<li>竹本賢一さん&amp;渡辺起さん 「世界で展開する新しいネットワークサービス「Miiverse＿のAWS活用事例」</li>
<li>栗林健太郎さん 「「技術的負債」を問いなおす」</li>
<li>金澤裕毅さん 「「クラウドソーシング Lancers」を支えるRDS for MySQL」</li>
</ul>


<h2>感想</h2>

<ul>
<li>サクッと楽にサーバが作れるようになると楽にできるようにアプリ側の流儀も変わる。(stateless)</li>
<li>本番環境の振る舞いや状態がコードになると開発環境も同じコードで作れるので環境の差分が限定的、局所的になる。</li>
<li>そうなると今度は本番とのネットワーク構成が大事。ここまで一緒にできる世界が来たら開発と本番という垣根がなくなる。</li>
<li>コンテナ型の仮想化すごい。これは要調査。使ってみよう。</li>
<li>AWSのベスト・プラクティスは使ってみないとわからないことも多そう。インフラ経験が少ない自分には地雷を踏めるほどの技量が・・・</li>
<li>AWS上で運用しているサービスでいつもきになるのがDB周り。EC2かRDSのメリット・デメリットの事例が聞けてよかった。クセが許容できるならRDS、自分で面倒見れるコストが払えるならMySQL on EC2という印象。</li>
<li>クラウドネイティブなアプリにできる要件ならそっちのほうがコストが下がりそう。</li>
<li>基本的なインフラ管理できているからAWSも使いこなせる感。</li>
<li>インフラ面倒みれてます→インフラの自動化・定型化・コード化→クラウドネイティブなアプリ設計+Immutable Infrastructureの文化段階。</li>
</ul>


<h2>振り返って</h2>

<ul>
<li>秘伝の手順書とサーバ調達に３ヶ月かかる今の境遇を考えて泣きそう。いや泣いた。</li>
<li>Civ5で行ったらチャリオットで機甲師団と戦うような現状。できることから真似して一歩ずつがんばろう。</li>
<li>来年もあるならぜひとも参加したい。それまでにはもっとAWSを使い込もう。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JJUGナイトセミナに参加してみたメモ]]></title>
    <link href="http://yoursite.com/blog/2014/02/20/jjug-20140219/"/>
    <updated>2014-02-20T01:45:02+09:00</updated>
    <id>http://yoursite.com/blog/2014/02/20/jjug-20140219</id>
    <content type="html"><![CDATA[<p><a href="http://jjug.doorkeeper.jp/events/8848">【東京】JJUG ナイトセミナ 「2.19 Eclipse、NetBeans、IntelliJ IDEA 3大IDE頂上決戦 」</a>に参加しました。そのメモ。</p>

<!-- more -->


<h2>NetBeansの紹介：日本オラクル株式会社 片貝 正紀氏</h2>

<ul>
<li><p>NetBeansとは</p>

<ul>
<li><p>ゴール</p>

<p>Sun、Oracleの製品のリリースに合わせる<br/>
→最新のJavaテクノロジをいち早くサポートする</p></li>
<li><p>特徴</p>

<ul>
<li>無償,オープンソースの統合開発環境</li>
<li>最新のJavaテクノロジにいち早く対応</li>
<li>オールインワン</li>
<li>書き方指南</li>
</ul>
</li>
<li><p>構成</p>

<ul>
<li><p>基本機能</p>

<ul>
<li>JDKバンドル版がある</li>
<li>GlassFish,Tomcat連携</li>
<li>Hudson,Bugzilla,JIRA連携</li>
<li>Git, Mercurial, Subversion連携</li>
<li>Maven,Ant対応</li>
</ul>
</li>
<li><p>HTML5サポート</p>

<ul>
<li>HTML5</li>
<li><p>JavaScript</p>

<ul>
<li>エディタ強化, Anguler.js,knockout.js など多数のナウいjsライブラリにも対応</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>NetBeans 8.0</p>

<ul>
<li><p>新機能</p>

<ul>
<li>Java8.0サポート</li>
<li>Java8へ移行を支援する機能(検査と変換?)</li>
</ul>
</li>
</ul>
</li>
<li><p>デモ</p>

<ul>
<li>ウィザード形式でポチポチやってく。スゴイ!!</li>
</ul>
</li>
</ul>


<h2>Intellij IDEAの紹介：株式会社サムライズム 山本 裕介氏</h2>

<ul>
<li><p>有償IDE vs 無償IDE</p></li>
<li><p>Java8の対応は?</p>

<ul>
<li>2012年8月からサポート→JDKの正式リリース前からサポート</li>
</ul>
</li>
<li><p>IDEAの特徴紹介</p>

<ul>
<li><p>コーディング支援機能</p>

<ul>
<li>空気読む機能</li>
<li>その場で正規表現チェックできちゃう</li>
<li>メソッド抽出すると重複コードもリファクタしてくれる</li>
</ul>
</li>
<li><p>データベース連携</p>

<ul>
<li>コード中のString文字列となったSQL分文をハイライトしてくれる</li>
<li>データベースからテーブル名を持ってきて補完してくれる</li>
</ul>
</li>
<li><p>いつものHTML+JS+CSSのライブコーディング</p></li>
</ul>
</li>
</ul>


<h2>Eclipseの紹介：DBFlute 久保 雅彦氏 (jflute)</h2>

<ul>
<li><p>Eclipse使いこなせている?</p></li>
<li><p>Eclipseのおすすめポインツ</p>

<ul>
<li>キャメルケースの大文字入力で検索・補完できる</li>
<li>先にメソッド書いてから戻り値を受け取るコードを補完する</li>
<li>Ctr+Alt+↓ で行コピー?</li>
<li>ショートカットを体に覚えこませる</li>
<li>困ったらCtr+1 →実際重点</li>
<li>link with editorはダブルクリックするものww</li>
<li>ショートカットを使いこなせばタイピング数が少なくなり、ミスも少なくなる</li>
<li>ラフに書いてから全体像を捉えて細部を詳細に描くプロセスができるのがIDEの力</li>
<li>ちゃんとIDEを使いこなすこと重点→圧巻のデモで納得</li>
</ul>
</li>
</ul>


<h2>感想</h2>

<ul>
<li>NetBeansのウィザード形式はOracleめいたアトモスフィア。実際スゴイ!!</li>
<li>IDEAは空気読む力がハンパない。正規表現チェックとか文字列SQLのテーブル名補完はカユいところに届いてありがたい。</li>
<li>jfluteさんの「IDEをちゃんと使いこなせてますか？」はココロに刺さった。</li>
</ul>

]]></content>
  </entry>
  
</feed>
